#define COMBAT_MODE

********************************************************

=== COMBAT MODE (HEV OS) ===

- Toggling ON COMBAT MODE will enable clash input/detection.

- A togglable mode that simulates the HEV Suit user sustaining health/armor damage.

- This mode should be accessible while in ON or OFF state.

- COMBAT MODE should activate the the rest of HEV OS' functionality and hopefully the additional features
  detailed below that are better suited for ProffieOS/Arduino.

********************************************************

======== Additions to current logic ========

--- Healing and Repairing - Over Time ---

- To regenerate health and armor, hold AUX and POW respectively.
  It should take 10s to recharge from 0 - 100.
  The original game has sound effects that play when healing and repairing, I have these ready.
  They behave exactly the same as:
  - bgnlock
  - lock
  - endlock

--- Cooldown/Timer Function ---

- This would be a configurable function that is set up and called before allowing certain voice lines/sounds to play.

********************************************************

======== Changes from current logic ========
- In this section I'd like to discuss changes in behaviour that ProffieOS/Arduino can handle better.

--- 'Hit Detection' - Physical Damage --- (Will need testing)

- 'Hit Detection', depending on the amount of force applied via a clash(/hit), a value between 1 - 50 is passed to
  the hit_sound function in HEV OS. Currently, user input is required via the console, which rolls a random value.

- Ideally it should act similarly to fett263's "Responsive Clash", where the higher the input recieved
  the bigger the clash effect and (if set up on the ProffieOS user's end) the louder the sound.
  In HEV OS' case it should be so that the higher the input received, the higher the damage sustained to health and armor.
  All of the calculations are handled by HEV OS, we just need to leverage the "Responsive" input from the ProffieOS/Arduino.


--- Voice Line Playback Consistency ---

- This part is to do with how often consistent types of voice lines are randomly played.

- This would likely be solved by implementing a realtime "cooldown" timer function, which is something
  I believe ProffieOS/Arduino can handle better than Python.
  
- Currently, HEV OS has a percentage based chance of playing a voice line, which is good, but it would be better
  to have a cooldown function that is called before rolling a percentage based voice line. The idea is so
  that the same voice line type doesn't potentially play consistently one after the other.

- Cooldowns to add to existing HEV OS functions would include:
	- Hit - Physical Damage voice lines 	- 15s cooldown, before another one can play.
	- Health Alert voice lines		 		    - 30s cooldown, before another...
	- Morphine Shot voice line				    - 300s cooldown, before another...


--- Hazard - Energy Damage ---

- Currently, hazards are triggered from user input via the console in the Python program. I have a better idea for this.
  For context of hazard, below is a snippet of the current hazard function in HEV OS. (from README.md)


(- Upon a hazard, armor will take damage ranging from 1 - 40. Health is unaffected, as long as there is armor.
- Randomly, 1 of 6 hazard sounds will play. The hazards themselves do not currently have a sound effect,
  so, a voice line will play detecting the random hazard.
- Current hazard types are [heat, shock, bio, blood toxins, chemical, radiation].
- If either of the 4 [bio, blood toxins, chemical, radiation] voice lines play, there is a 50% chance (default)
  that an additional voice line will play, stating that vital signs are dropping.)


- I believe hazards can be better implemented using a cooldown/timer function to give them a chance to trigger randomly,
  but not too often, using 2 time parameters. This would be a good way to simulate the HEV Suit user coming into
  contact with hazardous environments.

- Cooldown to add and change to existing hazard function would include:
  - Hazard - Energy Damage              - 10 - 20mins cooldown, before another...

********************************************************

--- Other ideas --- (Not necessary, but would be cool to look into after the above is implemented)

- Certain hazards can damage over time, instead of an instant flat value.
  - (would require the cooldown/timer function to be implemented)
  - Out of the 6 hazard types, 3 of them should only be able to do this: [bio, chemical, radiation].
  - Currently, these 4 hazard types are the only ones that currently have a percentage based chance to trigger an
    additional voice line, stating that vital signs are dropping.

- Blood Toxin modification.
  - (would require the cooldown/timer function to be implemented)
  - Maybe this hazard type could randomly trigger under the condition:
    if armor is 0 and another hazard has since damaged health and the user hasn't healed in over 5 minutes.